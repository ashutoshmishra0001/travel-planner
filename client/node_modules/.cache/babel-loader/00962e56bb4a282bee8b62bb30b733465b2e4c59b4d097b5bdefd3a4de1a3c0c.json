{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_URL\n});\n\n// Use an interceptor to dynamically set the Authorization header\n// before each request is sent. This is the most reliable way to handle auth.\napi.interceptors.request.use(config => {\n  try {\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (user && user.token) {\n      config.headers['Authorization'] = `Bearer ${user.token}`;\n    }\n  } catch (error) {\n    console.error(\"Could not parse user from localStorage\", error);\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// --- Trip-related API calls ---\nexport const getAllTrips = () => api.get('/trips');\nexport const getTripById = id => api.get(`/trips/${id}`);\nexport const createTrip = tripData => api.post('/trips', tripData);\nexport const updateTrip = (id, tripData) => api.patch(`/trips/${id}`, tripData);\nexport const deleteTrip = id => api.delete(`/trips/${id}`);\n\n// --- Auth-related API calls ---\n// These don't need the interceptor but it doesn't hurt\nexport const login = (email, password) => api.post('/auth/login', {\n  email,\n  password\n});\nexport const signup = (username, email, password) => api.post('/auth/register', {\n  username,\n  email,\n  password\n});\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","interceptors","request","use","config","user","JSON","parse","localStorage","getItem","token","headers","error","console","Promise","reject","getAllTrips","get","getTripById","id","createTrip","tripData","post","updateTrip","patch","deleteTrip","delete","login","email","password","signup","username"],"sources":["D:/travel-planner-app/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst api = axios.create({\r\n    baseURL: API_URL,\r\n});\r\n\r\n// Use an interceptor to dynamically set the Authorization header\r\n// before each request is sent. This is the most reliable way to handle auth.\r\napi.interceptors.request.use((config) => {\r\n    try {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        if (user && user.token) {\r\n            config.headers['Authorization'] = `Bearer ${user.token}`;\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Could not parse user from localStorage\", error);\r\n    }\r\n    return config;\r\n}, (error) => {\r\n    return Promise.reject(error);\r\n});\r\n\r\n// --- Trip-related API calls ---\r\nexport const getAllTrips = () => api.get('/trips');\r\nexport const getTripById = (id) => api.get(`/trips/${id}`);\r\nexport const createTrip = (tripData) => api.post('/trips', tripData);\r\nexport const updateTrip = (id, tripData) => api.patch(`/trips/${id}`, tripData);\r\nexport const deleteTrip = (id) => api.delete(`/trips/${id}`);\r\n\r\n// --- Auth-related API calls ---\r\n// These don't need the interceptor but it doesn't hurt\r\nexport const login = (email, password) => api.post('/auth/login', { email, password });\r\nexport const signup = (username, email, password) => api.post('/auth/register', { username, email, password });\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACrBC,OAAO,EAAEN;AACb,CAAC,CAAC;;AAEF;AACA;AACAI,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACrC,IAAI;IACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;IACrD,IAAIJ,IAAI,IAAIA,IAAI,CAACK,KAAK,EAAE;MACpBN,MAAM,CAACO,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUN,IAAI,CAACK,KAAK,EAAE;IAC5D;EACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;EAClE;EACA,OAAOR,MAAM;AACjB,CAAC,EAAGQ,KAAK,IAAK;EACV,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMI,WAAW,GAAGA,CAAA,KAAMlB,GAAG,CAACmB,GAAG,CAAC,QAAQ,CAAC;AAClD,OAAO,MAAMC,WAAW,GAAIC,EAAE,IAAKrB,GAAG,CAACmB,GAAG,CAAC,UAAUE,EAAE,EAAE,CAAC;AAC1D,OAAO,MAAMC,UAAU,GAAIC,QAAQ,IAAKvB,GAAG,CAACwB,IAAI,CAAC,QAAQ,EAAED,QAAQ,CAAC;AACpE,OAAO,MAAME,UAAU,GAAGA,CAACJ,EAAE,EAAEE,QAAQ,KAAKvB,GAAG,CAAC0B,KAAK,CAAC,UAAUL,EAAE,EAAE,EAAEE,QAAQ,CAAC;AAC/E,OAAO,MAAMI,UAAU,GAAIN,EAAE,IAAKrB,GAAG,CAAC4B,MAAM,CAAC,UAAUP,EAAE,EAAE,CAAC;;AAE5D;AACA;AACA,OAAO,MAAMQ,KAAK,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK/B,GAAG,CAACwB,IAAI,CAAC,aAAa,EAAE;EAAEM,KAAK;EAAEC;AAAS,CAAC,CAAC;AACtF,OAAO,MAAMC,MAAM,GAAGA,CAACC,QAAQ,EAAEH,KAAK,EAAEC,QAAQ,KAAK/B,GAAG,CAACwB,IAAI,CAAC,gBAAgB,EAAE;EAAES,QAAQ;EAAEH,KAAK;EAAEC;AAAS,CAAC,CAAC;AAE9G,eAAe/B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}